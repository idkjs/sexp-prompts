// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var SExp$ReactTemplate = require("./SExp.bs.js");
var ContentEditable$ReactTemplate = require("./ContentEditable.bs.js");

function directionToString(param) {
  switch (param) {
    case /* Current */0 :
        return "Current";
    case /* Backward */1 :
        return "Backward";
    case /* Forward */2 :
        return "Forward";
    
  }
}

function pathListToString(path) {
  var x = $$String.concat(":", List.map((function (prim) {
              return String(prim);
            }), path));
  return "[" + (x + "]");
}

function pathToString(path) {
  if (typeof path === "number") {
    return "root";
  } else if (path.TAG === /* SimplePath */0) {
    return "simple " + pathListToString(path._0);
  } else {
    return "relative " + (pathListToString(path._0) + ("@" + directionToString(path._1)));
  }
}

function simplifyPath(context, result) {
  if (typeof result === "number") {
    return /* [] */0;
  }
  if (result.TAG === /* SimplePath */0) {
    return result._0;
  }
  var dir = result._1;
  var _prev = /* [] */0;
  var _param = [
    List.rev(result._0),
    context
  ];
  while(true) {
    var param = _param;
    var prev = _prev;
    var match = param[0];
    if (!match) {
      return prev;
    }
    var rest = match.tl;
    var pos = match.hd;
    if (rest) {
      var list = param[1];
      if (list.TAG === /* Atom */0) {
        return prev;
      }
      var list$1 = list._0;
      if (List.length(list$1) <= pos) {
        return prev;
      }
      _param = [
        rest,
        List.nth(list$1, pos)
      ];
      _prev = {
        hd: pos,
        tl: prev
      };
      continue ;
    }
    var list$2 = param[1];
    if (list$2.TAG === /* Atom */0) {
      return prev;
    }
    var list$3 = list$2._0;
    if (dir === /* Current */0 && List.length(list$3) > pos) {
      return {
              hd: pos,
              tl: prev
            };
    } else if (dir === /* Forward */2 && List.length(list$3) > (pos + 1 | 0)) {
      return {
              hd: pos + 1 | 0,
              tl: prev
            };
    } else if (dir === /* Backward */1 && pos === 0 || dir !== /* Backward */1) {
      return prev;
    } else {
      return {
              hd: pos - 1 | 0,
              tl: prev
            };
    }
  };
}

var Overflow = /* @__PURE__ */Caml_exceptions.create("SExpEditor-ReactTemplate.Overflow");

var InvalidPath = /* @__PURE__ */Caml_exceptions.create("SExpEditor-ReactTemplate.InvalidPath");

function getValue($$event) {
  return $$event.target.value;
}

function getValueByFocus($$event) {
  return $$event.target.innerText;
}

function getValueByKeyboard($$event) {
  return $$event.target.innerText;
}

var doFocus = (function (choice, e) {
      if (e) {
        if (choice)
          e.focus();
        e.tabIndex=0;
      }
    });

var selectAll = (function (event) {
      const self = event.target;
      const selection = window.getSelection();
      const range = document.createRange();
      range.selectNodeContents(self);
      selection.removeAllRanges();
      selection.addRange(range);
    });

function insertList(item, pos, list) {
  var _prev = /* [] */0;
  var _param = [
    pos,
    list
  ];
  while(true) {
    var param = _param;
    var prev = _prev;
    var n = param[0];
    if (n === 0) {
      return Pervasives.$at(List.rev(prev), {
                  hd: item,
                  tl: param[1]
                });
    }
    var match = param[1];
    if (match) {
      _param = [
        n - 1 | 0,
        match.tl
      ];
      _prev = {
        hd: match.hd,
        tl: prev
      };
      continue ;
    }
    throw {
          RE_EXN_ID: Overflow,
          Error: new Error()
        };
  };
}

function removeFromList(pos, list) {
  var _prev = /* [] */0;
  var _param = [
    pos,
    list
  ];
  while(true) {
    var param = _param;
    var prev = _prev;
    var n = param[0];
    if (param[1]) {
      if (n === 0) {
        return Pervasives.$at(List.rev(prev), param[1].tl);
      }
      var match = param[1];
      _param = [
        n - 1 | 0,
        match.tl
      ];
      _prev = {
        hd: match.hd,
        tl: prev
      };
      continue ;
    }
    throw {
          RE_EXN_ID: Overflow,
          Error: new Error()
        };
  };
}

function pureDebug(msgfn, thing) {
  console.log(Curry._1(msgfn, thing));
  return thing;
}

function actionDump(path) {
  switch (path.TAG | 0) {
    case /* Select */0 :
        return "Select " + pathToString(path._0);
    case /* Append */1 :
        return "Append " + (pathToString(path._0) + (" " + directionToString(path._1)));
    case /* AppendWithNil */2 :
        return "AppendWithNil " + (pathToString(path._0) + (" " + directionToString(path._1)));
    case /* Delete */3 :
        return "Delete " + (pathToString(path._0) + (" " + directionToString(path._1)));
    case /* Package */4 :
        return "Package " + pathToString(path._0);
    case /* Unpackage */5 :
        return "Unpackage " + pathToString(path._0);
    case /* AsNil */6 :
        return "AsNil " + pathToString(path._0);
    case /* Modify */7 :
        return "Modify " + (pathToString(path._0) + (": " + path._1));
    
  }
}

function SExpEditor(Props) {
  var data = Props.data;
  var onUpdate = Props.onUpdate;
  return ReactCompat.useRecordApi({
              willReceiveProps: ReactCompat.component.willReceiveProps,
              willUnmount: ReactCompat.component.willUnmount,
              didUpdate: ReactCompat.component.didUpdate,
              shouldUpdate: ReactCompat.component.shouldUpdate,
              willUpdate: ReactCompat.component.willUpdate,
              didMount: ReactCompat.component.didMount,
              initialState: (function (param) {
                  return {
                          select: /* RootPath */0
                        };
                }),
              reducer: (function (action, _state) {
                  console.log(actionDump(action));
                  var handleUpdate = function (path) {
                    switch (path.TAG | 0) {
                      case /* CleanUpdate */0 :
                          return {
                                  TAG: /* Update */0,
                                  _0: {
                                    select: path._0
                                  }
                                };
                      case /* DirtyUpdate */1 :
                          var expr = path._0;
                          return {
                                  TAG: /* SideEffects */1,
                                  _0: (function (param) {
                                      return Curry._1(onUpdate, expr);
                                    })
                                };
                      case /* MixUpdate */2 :
                          var expr$1 = path._1;
                          return {
                                  TAG: /* UpdateWithSideEffects */2,
                                  _0: {
                                    select: path._0
                                  },
                                  _1: (function (param) {
                                      return Curry._1(onUpdate, expr$1);
                                    })
                                };
                      
                    }
                  };
                  switch (action.TAG | 0) {
                    case /* Select */0 :
                        return handleUpdate({
                                    TAG: /* CleanUpdate */0,
                                    _0: action._0
                                  });
                    case /* Append */1 :
                        var direction = action._1;
                        var path = action._0;
                        var spath = List.rev(simplifyPath(data, path));
                        var access = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (match) {
                              var next = match.tl;
                              var pos = match.hd;
                              if (next) {
                                var list = param[1];
                                if (list.TAG === /* Atom */0) {
                                  throw {
                                        RE_EXN_ID: InvalidPath,
                                        _1: path,
                                        Error: new Error()
                                      };
                                }
                                var list$1 = list._0;
                                _param = [
                                  next,
                                  List.nth(list$1, pos),
                                  {
                                    hd: pos,
                                    tl: param[2]
                                  }
                                ];
                                _fn = (function(fn,pos,list$1){
                                return function (newitem) {
                                  return Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: List.mapi((function (i, item) {
                                                      if (i === pos) {
                                                        return newitem;
                                                      } else {
                                                        return item;
                                                      }
                                                    }), list$1)
                                            });
                                }
                                }(fn,pos,list$1));
                                continue ;
                              }
                              var list$2 = param[1];
                              if (list$2.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path,
                                      Error: new Error()
                                    };
                              }
                              var prev = param[2];
                              var list$3 = list$2._0;
                              if (direction >= 2) {
                                return [
                                        Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: insertList({
                                                    TAG: /* Atom */0,
                                                    _0: ""
                                                  }, pos + 1 | 0, list$3)
                                            }),
                                        {
                                          TAG: /* SimplePath */0,
                                          _0: {
                                            hd: pos + 1 | 0,
                                            tl: prev
                                          }
                                        }
                                      ];
                              } else {
                                return [
                                        Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: insertList({
                                                    TAG: /* Atom */0,
                                                    _0: ""
                                                  }, pos, list$3)
                                            }),
                                        {
                                          TAG: /* SimplePath */0,
                                          _0: {
                                            hd: pos,
                                            tl: prev
                                          }
                                        }
                                      ];
                              }
                            }
                            var name = param[1];
                            if (name.TAG === /* Atom */0) {
                              if (param[2]) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path,
                                      Error: new Error()
                                    };
                              }
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: {
                                              hd: {
                                                TAG: /* Atom */0,
                                                _0: name._0
                                              },
                                              tl: /* [] */0
                                            }
                                          }),
                                      {
                                        TAG: /* SimplePath */0,
                                        _0: {
                                          hd: 0,
                                          tl: /* [] */0
                                        }
                                      }
                                    ];
                            }
                            var list$4 = name._0;
                            if (list$4) {
                              if (param[2]) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path,
                                      Error: new Error()
                                    };
                              }
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: {
                                              hd: {
                                                TAG: /* Atom */0,
                                                _0: ""
                                              },
                                              tl: list$4
                                            }
                                          }),
                                      {
                                        TAG: /* SimplePath */0,
                                        _0: {
                                          hd: 0,
                                          tl: /* [] */0
                                        }
                                      }
                                    ];
                            }
                            if (param[2]) {
                              throw {
                                    RE_EXN_ID: InvalidPath,
                                    _1: path,
                                    Error: new Error()
                                  };
                            }
                            return [
                                    Curry._1(fn, {
                                          TAG: /* List */1,
                                          _0: {
                                            hd: {
                                              TAG: /* Atom */0,
                                              _0: ""
                                            },
                                            tl: /* [] */0
                                          }
                                        }),
                                    {
                                      TAG: /* SimplePath */0,
                                      _0: {
                                        hd: 0,
                                        tl: /* [] */0
                                      }
                                    }
                                  ];
                          };
                        };
                        var match = access((function (x) {
                                return x;
                              }), [
                              spath,
                              data,
                              /* [] */0
                            ]);
                        return handleUpdate({
                                    TAG: /* MixUpdate */2,
                                    _0: match[1],
                                    _1: match[0]
                                  });
                    case /* AppendWithNil */2 :
                        var direction$1 = action._1;
                        var path$1 = action._0;
                        var spath$1 = List.rev(simplifyPath(data, path$1));
                        var access$1 = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (match) {
                              var next = match.tl;
                              var pos = match.hd;
                              if (next) {
                                var list = param[1];
                                if (list.TAG === /* Atom */0) {
                                  throw {
                                        RE_EXN_ID: InvalidPath,
                                        _1: path$1,
                                        Error: new Error()
                                      };
                                }
                                var list$1 = list._0;
                                _param = [
                                  next,
                                  List.nth(list$1, pos),
                                  {
                                    hd: pos,
                                    tl: param[2]
                                  }
                                ];
                                _fn = (function(fn,pos,list$1){
                                return function (newitem) {
                                  return Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: List.mapi((function (i, item) {
                                                      if (i === pos) {
                                                        return newitem;
                                                      } else {
                                                        return item;
                                                      }
                                                    }), list$1)
                                            });
                                }
                                }(fn,pos,list$1));
                                continue ;
                              }
                              var list$2 = param[1];
                              if (list$2.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$1,
                                      Error: new Error()
                                    };
                              }
                              var xpos = direction$1 === /* Forward */2 ? pos + 1 | 0 : pos;
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: insertList({
                                                  TAG: /* Atom */0,
                                                  _0: ""
                                                }, xpos, List.mapi((function(pos){
                                                    return function (i, item) {
                                                      if (i === pos) {
                                                        return SExp$ReactTemplate.empty;
                                                      } else {
                                                        return item;
                                                      }
                                                    }
                                                    }(pos)), list$2._0))
                                          }),
                                      {
                                        TAG: /* SimplePath */0,
                                        _0: {
                                          hd: xpos,
                                          tl: param[2]
                                        }
                                      }
                                    ];
                            }
                            var name = param[1];
                            if (name.TAG === /* Atom */0) {
                              if (param[2]) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$1,
                                      Error: new Error()
                                    };
                              }
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: {
                                              hd: {
                                                TAG: /* Atom */0,
                                                _0: name._0
                                              },
                                              tl: /* [] */0
                                            }
                                          }),
                                      {
                                        TAG: /* SimplePath */0,
                                        _0: {
                                          hd: 0,
                                          tl: /* [] */0
                                        }
                                      }
                                    ];
                            }
                            var list$3 = name._0;
                            if (list$3) {
                              if (param[2]) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$1,
                                      Error: new Error()
                                    };
                              }
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: {
                                              hd: {
                                                TAG: /* Atom */0,
                                                _0: ""
                                              },
                                              tl: list$3
                                            }
                                          }),
                                      {
                                        TAG: /* SimplePath */0,
                                        _0: {
                                          hd: 0,
                                          tl: /* [] */0
                                        }
                                      }
                                    ];
                            }
                            if (param[2]) {
                              throw {
                                    RE_EXN_ID: InvalidPath,
                                    _1: path$1,
                                    Error: new Error()
                                  };
                            }
                            return [
                                    Curry._1(fn, {
                                          TAG: /* List */1,
                                          _0: {
                                            hd: {
                                              TAG: /* Atom */0,
                                              _0: ""
                                            },
                                            tl: /* [] */0
                                          }
                                        }),
                                    {
                                      TAG: /* SimplePath */0,
                                      _0: {
                                        hd: 0,
                                        tl: /* [] */0
                                      }
                                    }
                                  ];
                          };
                        };
                        var match$1 = access$1((function (x) {
                                return x;
                              }), [
                              spath$1,
                              data,
                              /* [] */0
                            ]);
                        return handleUpdate({
                                    TAG: /* MixUpdate */2,
                                    _0: match$1[1],
                                    _1: match$1[0]
                                  });
                    case /* Delete */3 :
                        var dir = action._1;
                        var path$2 = action._0;
                        var spath$2 = List.rev(simplifyPath(data, path$2));
                        var access$2 = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (match) {
                              var next = match.tl;
                              var pos = match.hd;
                              if (next) {
                                var list = param[1];
                                if (list.TAG === /* Atom */0) {
                                  throw {
                                        RE_EXN_ID: InvalidPath,
                                        _1: path$2,
                                        Error: new Error()
                                      };
                                }
                                var list$1 = list._0;
                                _param = [
                                  next,
                                  List.nth(list$1, pos)
                                ];
                                _fn = (function(fn,pos,list$1){
                                return function (newitem) {
                                  return Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: List.mapi((function (i, item) {
                                                      if (i === pos) {
                                                        return newitem;
                                                      } else {
                                                        return item;
                                                      }
                                                    }), list$1)
                                            });
                                }
                                }(fn,pos,list$1));
                                continue ;
                              }
                              var list$2 = param[1];
                              if (list$2.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$2,
                                      Error: new Error()
                                    };
                              }
                              var list$3 = list$2._0;
                              if (List.length(list$3) > pos) {
                                return [
                                        Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: removeFromList(pos, list$3)
                                            }),
                                        dir === /* Backward */1 ? ({
                                              TAG: /* RelativePath */1,
                                              _0: List.rev(spath$2),
                                              _1: /* Backward */1
                                            }) : ({
                                              TAG: /* RelativePath */1,
                                              _0: List.rev(spath$2),
                                              _1: /* Current */0
                                            })
                                      ];
                              } else {
                                return [
                                        Curry._1(fn, list$2),
                                        {
                                          TAG: /* SimplePath */0,
                                          _0: List.rev(spath$2)
                                        }
                                      ];
                              }
                            }
                            var src = param[1];
                            if (src.TAG === /* Atom */0) {
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: /* [] */0
                                          }),
                                      /* RootPath */0
                                    ];
                            } else {
                              return [
                                      Curry._1(fn, src),
                                      /* RootPath */0
                                    ];
                            }
                          };
                        };
                        var match$2 = access$2((function (x) {
                                return x;
                              }), [
                              spath$2,
                              data
                            ]);
                        return handleUpdate({
                                    TAG: /* MixUpdate */2,
                                    _0: match$2[1],
                                    _1: match$2[0]
                                  });
                    case /* Package */4 :
                        var path$3 = action._0;
                        var spath$3 = List.rev(simplifyPath(data, path$3));
                        var access$3 = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (match) {
                              var list = param[1];
                              var pos = match.hd;
                              if (list.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$3,
                                      Error: new Error()
                                    };
                              }
                              var list$1 = list._0;
                              _param = [
                                match.tl,
                                List.nth(list$1, pos),
                                {
                                  hd: pos,
                                  tl: param[2]
                                }
                              ];
                              _fn = (function(fn,pos,list$1){
                              return function (newitem) {
                                return Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: List.mapi((function (i, item) {
                                                    if (i === pos) {
                                                      return newitem;
                                                    } else {
                                                      return item;
                                                    }
                                                  }), list$1)
                                          });
                              }
                              }(fn,pos,list$1));
                              continue ;
                            }
                            var src = param[1];
                            if (src.TAG === /* Atom */0) {
                              if (src._0 === "") {
                                return [
                                        Curry._1(fn, {
                                              TAG: /* List */1,
                                              _0: {
                                                hd: {
                                                  TAG: /* Atom */0,
                                                  _0: ""
                                                },
                                                tl: /* [] */0
                                              }
                                            }),
                                        {
                                          TAG: /* SimplePath */0,
                                          _0: {
                                            hd: 0,
                                            tl: param[2]
                                          }
                                        }
                                      ];
                              }
                              
                            } else if (!src._0) {
                              return [
                                      Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: {
                                              hd: {
                                                TAG: /* Atom */0,
                                                _0: ""
                                              },
                                              tl: /* [] */0
                                            }
                                          }),
                                      {
                                        TAG: /* SimplePath */0,
                                        _0: {
                                          hd: 0,
                                          tl: param[2]
                                        }
                                      }
                                    ];
                            }
                            return [
                                    Curry._1(fn, {
                                          TAG: /* List */1,
                                          _0: {
                                            hd: src,
                                            tl: {
                                              hd: {
                                                TAG: /* Atom */0,
                                                _0: ""
                                              },
                                              tl: /* [] */0
                                            }
                                          }
                                        }),
                                    {
                                      TAG: /* SimplePath */0,
                                      _0: {
                                        hd: 1,
                                        tl: param[2]
                                      }
                                    }
                                  ];
                          };
                        };
                        var match$3 = access$3((function (x) {
                                return x;
                              }), [
                              spath$3,
                              data,
                              /* [] */0
                            ]);
                        return handleUpdate({
                                    TAG: /* MixUpdate */2,
                                    _0: match$3[1],
                                    _1: match$3[0]
                                  });
                    case /* Unpackage */5 :
                        var path$4 = action._0;
                        var spath$4 = List.rev(simplifyPath(data, path$4));
                        var access$4 = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (!match) {
                              return Curry._1(fn, param[1]);
                            }
                            var next = match.tl;
                            var pos = match.hd;
                            if (next) {
                              var list = param[1];
                              if (list.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$4,
                                      Error: new Error()
                                    };
                              }
                              var list$1 = list._0;
                              _param = [
                                next,
                                List.nth(list$1, pos)
                              ];
                              _fn = (function(fn,pos,list$1){
                              return function (newitem) {
                                return Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: List.mapi((function (i, item) {
                                                    if (i === pos) {
                                                      return newitem;
                                                    } else {
                                                      return item;
                                                    }
                                                  }), list$1)
                                          });
                              }
                              }(fn,pos,list$1));
                              continue ;
                            }
                            var list$2 = param[1];
                            if (list$2.TAG === /* Atom */0) {
                              throw {
                                    RE_EXN_ID: InvalidPath,
                                    _1: path$4,
                                    Error: new Error()
                                  };
                            }
                            var proc = function (_prev, _param) {
                              while(true) {
                                var param = _param;
                                var prev = _prev;
                                var n = param[0];
                                if (n !== 0) {
                                  var match = param[1];
                                  if (!match) {
                                    return prev;
                                  }
                                  _param = [
                                    n - 1 | 0,
                                    match.tl
                                  ];
                                  _prev = {
                                    hd: match.hd,
                                    tl: prev
                                  };
                                  continue ;
                                }
                                var next = param[1];
                                if (!next) {
                                  return Pervasives.$at(List.rev(prev), next);
                                }
                                var list = next.hd;
                                if (list.TAG === /* Atom */0) {
                                  return Pervasives.$at(List.rev(prev), next);
                                } else {
                                  return Pervasives.$at(List.rev(prev), Pervasives.$at(list._0, next.tl));
                                }
                              };
                            };
                            return Curry._1(fn, {
                                        TAG: /* List */1,
                                        _0: proc(/* [] */0, [
                                              pos,
                                              list$2._0
                                            ])
                                      });
                          };
                        };
                        var expr = access$4((function (x) {
                                return x;
                              }), [
                              spath$4,
                              data
                            ]);
                        return handleUpdate({
                                    TAG: /* DirtyUpdate */1,
                                    _0: expr
                                  });
                    case /* AsNil */6 :
                        var path$5 = action._0;
                        var spath$5 = List.rev(simplifyPath(data, path$5));
                        var access$5 = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (match) {
                              var list = param[1];
                              var pos = match.hd;
                              if (list.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$5,
                                      Error: new Error()
                                    };
                              }
                              var list$1 = list._0;
                              _param = [
                                match.tl,
                                List.nth(list$1, pos)
                              ];
                              _fn = (function(fn,pos,list$1){
                              return function (newitem) {
                                return Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: List.mapi((function (i, item) {
                                                    if (i === pos) {
                                                      return newitem;
                                                    } else {
                                                      return item;
                                                    }
                                                  }), list$1)
                                          });
                              }
                              }(fn,pos,list$1));
                              continue ;
                            }
                            var src = param[1];
                            if (src.TAG === /* Atom */0 && src._0 === "") {
                              return Curry._1(fn, {
                                          TAG: /* List */1,
                                          _0: /* [] */0
                                        });
                            } else {
                              return Curry._1(fn, src);
                            }
                          };
                        };
                        var expr$1 = access$5((function (x) {
                                return x;
                              }), [
                              spath$5,
                              data
                            ]);
                        return handleUpdate({
                                    TAG: /* DirtyUpdate */1,
                                    _0: expr$1
                                  });
                    case /* Modify */7 :
                        var text = action._1;
                        var path$6 = action._0;
                        var spath$6 = List.rev(simplifyPath(data, path$6));
                        var access$6 = function (_fn, _param) {
                          while(true) {
                            var param = _param;
                            var fn = _fn;
                            var match = param[0];
                            if (match) {
                              var list = param[1];
                              var pos = match.hd;
                              if (list.TAG === /* Atom */0) {
                                throw {
                                      RE_EXN_ID: InvalidPath,
                                      _1: path$6,
                                      Error: new Error()
                                    };
                              }
                              var list$1 = list._0;
                              _param = [
                                match.tl,
                                List.nth(list$1, pos)
                              ];
                              _fn = (function(fn,pos,list$1){
                              return function (newitem) {
                                return Curry._1(fn, {
                                            TAG: /* List */1,
                                            _0: List.mapi((function (i, item) {
                                                    if (i === pos) {
                                                      return newitem;
                                                    } else {
                                                      return item;
                                                    }
                                                  }), list$1)
                                          });
                              }
                              }(fn,pos,list$1));
                              continue ;
                            }
                            if (param[1].TAG === /* Atom */0) {
                              return Curry._1(fn, {
                                          TAG: /* Atom */0,
                                          _0: text
                                        });
                            }
                            throw {
                                  RE_EXN_ID: InvalidPath,
                                  _1: path$6,
                                  Error: new Error()
                                };
                          };
                        };
                        var expr$2 = access$6((function (x) {
                                return x;
                              }), [
                              spath$6,
                              data
                            ]);
                        return handleUpdate({
                                    TAG: /* DirtyUpdate */1,
                                    _0: expr$2
                                  });
                    
                  }
                }),
              render: (function (self) {
                  var rootRef = React.useRef(null);
                  var ref = rootRef.current;
                  if (!(ref == null)) {
                    doFocus(true, ref);
                  }
                  var path = simplifyPath(data, self.state.select);
                  var handleFocus = function (path, $$event) {
                    $$event.stopPropagation();
                    return Curry._1(self.send, {
                                TAG: /* Select */0,
                                _0: {
                                  TAG: /* SimplePath */0,
                                  _0: path
                                }
                              });
                  };
                  var handleKeydown = function (path, $$event) {
                    $$event.stopPropagation();
                    var match = $$event.keyCode;
                    var match$1 = $$event.ctrlKey;
                    if (match !== 13) {
                      if (match !== 32) {
                        return ;
                      } else {
                        if (match$1) {
                          Curry._1(self.send, {
                                TAG: /* Append */1,
                                _0: {
                                  TAG: /* SimplePath */0,
                                  _0: path
                                },
                                _1: /* Backward */1
                              });
                          $$event.preventDefault();
                        } else {
                          Curry._1(self.send, {
                                TAG: /* Append */1,
                                _0: {
                                  TAG: /* SimplePath */0,
                                  _0: path
                                },
                                _1: /* Forward */2
                              });
                          $$event.preventDefault();
                        }
                        return ;
                      }
                    } else {
                      Curry._1(self.send, {
                            TAG: /* Package */4,
                            _0: {
                              TAG: /* SimplePath */0,
                              _0: path
                            }
                          });
                      $$event.preventDefault();
                      return ;
                    }
                  };
                  var handleKeyup = function (path, $$event) {
                    $$event.stopPropagation();
                    var match = $$event.keyCode;
                    if (match < 38) {
                      if (match !== 8) {
                        return ;
                      } else {
                        Curry._1(self.send, {
                              TAG: /* Delete */3,
                              _0: {
                                TAG: /* SimplePath */0,
                                _0: path
                              },
                              _1: /* Backward */1
                            });
                        $$event.preventDefault();
                        return ;
                      }
                    }
                    if (match >= 47) {
                      return ;
                    }
                    switch (match) {
                      case 38 :
                          Curry._1(self.send, {
                                TAG: /* Select */0,
                                _0: {
                                  TAG: /* RelativePath */1,
                                  _0: path,
                                  _1: /* Backward */1
                                }
                              });
                          $$event.preventDefault();
                          return ;
                      case 40 :
                          Curry._1(self.send, {
                                TAG: /* Select */0,
                                _0: {
                                  TAG: /* RelativePath */1,
                                  _0: path,
                                  _1: /* Forward */2
                                }
                              });
                          $$event.preventDefault();
                          return ;
                      case 39 :
                      case 41 :
                      case 42 :
                      case 43 :
                      case 44 :
                      case 45 :
                          return ;
                      case 46 :
                          Curry._1(self.send, {
                                TAG: /* Delete */3,
                                _0: {
                                  TAG: /* SimplePath */0,
                                  _0: path
                                },
                                _1: /* Forward */2
                              });
                          $$event.preventDefault();
                          return ;
                      
                    }
                  };
                  var renderList = function (xpath, list) {
                    var handleListKeyup = function ($$event) {
                      $$event.stopPropagation();
                      var match = $$event.shiftKey;
                      var match$1 = $$event.keyCode;
                      if (match && match$1 === 8) {
                        Curry._1(self.send, {
                              TAG: /* Unpackage */5,
                              _0: {
                                TAG: /* SimplePath */0,
                                _0: xpath
                              }
                            });
                        $$event.preventDefault();
                        return ;
                      } else {
                        return handleKeyup(xpath, $$event);
                      }
                    };
                    return React.createElement("span", {
                                ref: rootRef,
                                className: "list",
                                onKeyDown: (function (param) {
                                    return handleKeydown(xpath, param);
                                  }),
                                onKeyUp: handleListKeyup,
                                onFocus: (function (param) {
                                    return handleFocus(xpath, param);
                                  })
                              }, $$Array.of_list(List.mapi((function (i, item) {
                                          var clazz;
                                          clazz = item.TAG === /* Atom */0 || item._0 ? "item" : "item item-nil";
                                          return React.createElement("div", {
                                                      key: String(i),
                                                      className: clazz
                                                    }, renderSExp({
                                                          hd: i,
                                                          tl: xpath
                                                        }, item));
                                        }), list)));
                  };
                  var renderSExp = function (xpath, value) {
                    var special;
                    var content;
                    if (value.TAG === /* Atom */0) {
                      var value$1 = value._0;
                      var handleInputKeyup = function ($$event) {
                        $$event.stopPropagation();
                        var match = $$event.target.innerText;
                        var match$1 = $$event.keyCode;
                        switch (match$1) {
                          case 38 :
                              Curry._1(self.send, {
                                    TAG: /* Select */0,
                                    _0: {
                                      TAG: /* RelativePath */1,
                                      _0: path,
                                      _1: /* Backward */1
                                    }
                                  });
                              $$event.preventDefault();
                              return ;
                          case 39 :
                              break;
                          case 40 :
                              Curry._1(self.send, {
                                    TAG: /* Select */0,
                                    _0: {
                                      TAG: /* RelativePath */1,
                                      _0: path,
                                      _1: /* Forward */2
                                    }
                                  });
                              $$event.preventDefault();
                              return ;
                          default:
                            
                        }
                        if (match === "") {
                          return handleKeyup(xpath, $$event);
                        }
                        
                      };
                      var handleInputKeydown = function ($$event) {
                        $$event.stopPropagation();
                        var match = $$event.target.innerText;
                        var match$1 = $$event.keyCode;
                        var match$2 = $$event.key;
                        var exit = 0;
                        switch (match$2) {
                          case "(" :
                          case ")" :
                              $$event.preventDefault();
                              return ;
                          default:
                            if (match$1 > 40 || match$1 < 38) {
                              if (match$1 !== 13) {
                                exit = 2;
                              } else {
                                Curry._1(self.send, {
                                      TAG: /* Package */4,
                                      _0: {
                                        TAG: /* SimplePath */0,
                                        _0: path
                                      }
                                    });
                                $$event.preventDefault();
                                return ;
                              }
                            } else {
                              if (match$1 !== 39) {
                                $$event.preventDefault();
                                return ;
                              }
                              exit = 2;
                            }
                        }
                        if (exit === 2 && match === "" && match$1 === 32) {
                          Curry._1(self.send, {
                                TAG: /* AppendWithNil */2,
                                _0: {
                                  TAG: /* SimplePath */0,
                                  _0: path
                                },
                                _1: $$event.ctrlKey ? /* Backward */1 : /* Forward */2
                              });
                          $$event.preventDefault();
                          return ;
                        }
                        if (match$1 !== 32) {
                          return ;
                        } else {
                          Curry._1(self.send, {
                                TAG: /* Append */1,
                                _0: {
                                  TAG: /* SimplePath */0,
                                  _0: path
                                },
                                _1: $$event.ctrlKey ? /* Backward */1 : /* Forward */2
                              });
                          $$event.preventDefault();
                          return ;
                        }
                      };
                      var handleBlur = function ($$event) {
                        var match = $$event.target.innerText;
                        if (match === "" && Caml_obj.caml_equal(path, xpath)) {
                          return Curry._1(self.send, {
                                      TAG: /* Delete */3,
                                      _0: {
                                        TAG: /* SimplePath */0,
                                        _0: path
                                      },
                                      _1: /* Backward */1
                                    });
                        }
                        
                      };
                      var handleChange = function ($$event) {
                        return Curry._1(self.send, {
                                    TAG: /* Modify */7,
                                    _0: {
                                      TAG: /* SimplePath */0,
                                      _0: xpath
                                    },
                                    _1: $$event.target.value
                                  });
                      };
                      var handleInputFocus = function ($$event) {
                        selectAll($$event);
                        return handleFocus(xpath, $$event);
                      };
                      return React.createElement(ContentEditable$ReactTemplate.make, {
                                  html: value$1,
                                  autofocus: Caml_obj.caml_equal(path, xpath),
                                  className: "atom editor",
                                  onChange: handleChange,
                                  onKeyUp: handleInputKeyup,
                                  onKeyDown: handleInputKeydown,
                                  onBlur: handleBlur,
                                  onFocus: handleInputFocus
                                });
                    }
                    var list = value._0;
                    if (!list) {
                      return React.createElement("span", {
                                  ref: rootRef,
                                  className: "nil",
                                  onKeyDown: (function (param) {
                                      return handleKeydown(xpath, param);
                                    }),
                                  onKeyUp: (function (param) {
                                      return handleKeyup(xpath, param);
                                    }),
                                  onFocus: (function (param) {
                                      return handleFocus(xpath, param);
                                    })
                                });
                    }
                    var special$1 = list.hd;
                    if (special$1.TAG !== /* Atom */0) {
                      return renderList(xpath, list);
                    }
                    var special$2 = special$1._0;
                    switch (special$2) {
                      case "quote" :
                          var match = list.tl;
                          if (!match) {
                            return renderList(xpath, list);
                          }
                          if (match.tl) {
                            return renderList(xpath, list);
                          }
                          special = special$2;
                          content = match.hd;
                          break;
                      case "string" :
                          var match$1 = list.tl;
                          if (!match$1) {
                            return renderList(xpath, list);
                          }
                          var content$1 = match$1.hd;
                          if (content$1.TAG === /* Atom */0) {
                            return renderList(xpath, list);
                          }
                          if (match$1.tl) {
                            return renderList(xpath, list);
                          }
                          special = special$2;
                          content = content$1;
                          break;
                      default:
                        return renderList(xpath, list);
                    }
                    return React.createElement("span", {
                                ref: rootRef,
                                className: special,
                                onKeyDown: (function (param) {
                                    return handleKeydown(xpath, param);
                                  }),
                                onKeyUp: (function (param) {
                                    return handleKeyup(xpath, param);
                                  }),
                                onFocus: (function (param) {
                                    return handleFocus(xpath, param);
                                  })
                              }, renderSExp({
                                    hd: 1,
                                    tl: xpath
                                  }, content));
                  };
                  return renderSExp(/* [] */0, data);
                })
            });
}

var make = SExpEditor;

exports.directionToString = directionToString;
exports.pathListToString = pathListToString;
exports.pathToString = pathToString;
exports.simplifyPath = simplifyPath;
exports.Overflow = Overflow;
exports.InvalidPath = InvalidPath;
exports.getValue = getValue;
exports.getValueByFocus = getValueByFocus;
exports.getValueByKeyboard = getValueByKeyboard;
exports.doFocus = doFocus;
exports.selectAll = selectAll;
exports.insertList = insertList;
exports.removeFromList = removeFromList;
exports.pureDebug = pureDebug;
exports.actionDump = actionDump;
exports.make = make;
/* react Not a pure module */
