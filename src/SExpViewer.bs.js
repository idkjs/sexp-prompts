// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("SExpViewer");

function make(data, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var renderList = function (list) {
                return React.createElement("span", {
                            className: "list"
                          }, $$Array.of_list(List.mapi((function (i, item) {
                                      var clazz;
                                      clazz = !item.tag || item[0] ? "item" : "item item-nil";
                                      return React.createElement("div", {
                                                  key: String(i),
                                                  className: clazz
                                                }, renderSExp(item));
                                    }), list)));
              };
              var renderSExp = function (param) {
                var exit = 0;
                var special;
                var content;
                if (param.tag) {
                  var list = param[0];
                  if (list) {
                    var match = list[0];
                    if (match.tag) {
                      return renderList(list);
                    } else {
                      var special$1 = match[0];
                      switch (special$1) {
                        case "quote" : 
                            var match$1 = list[1];
                            if (match$1 && !match$1[1]) {
                              special = special$1;
                              content = match$1[0];
                              exit = 1;
                            } else {
                              return renderList(list);
                            }
                            break;
                        case "string" : 
                            var match$2 = list[1];
                            if (match$2) {
                              var content$1 = match$2[0];
                              if (content$1.tag && !match$2[1]) {
                                special = special$1;
                                content = content$1;
                                exit = 1;
                              } else {
                                return renderList(list);
                              }
                            } else {
                              return renderList(list);
                            }
                            break;
                        default:
                          return renderList(list);
                      }
                    }
                  } else {
                    return React.createElement("span", {
                                className: "nil"
                              });
                  }
                } else {
                  var value = param[0];
                  return React.createElement("span", {
                              className: "atom"
                            }, value);
                }
                if (exit === 1) {
                  return React.createElement("span", {
                              className: special
                            }, renderSExp(content));
                }
                
              };
              return renderSExp(data);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
