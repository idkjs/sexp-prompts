// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function toString(param) {
  if (param.tag) {
    var join = function (param) {
      if (param) {
        var tail = param[1];
        var only = param[0];
        if (tail) {
          return toString(only) + (" " + join(tail));
        } else {
          return toString(only);
        }
      } else {
        return "";
      }
    };
    return "(" + (join(param[0]) + ")");
  } else {
    return param[0];
  }
}

function to_list(s) {
  var _acc = /* [] */0;
  var _i = s.length - 1 | 0;
  while(true) {
    var i = _i;
    var acc = _acc;
    if (i === -1) {
      return acc;
    } else {
      _i = i - 1 | 0;
      _acc = /* :: */[
        Caml_string.get(s, i),
        acc
      ];
      continue ;
    }
  };
}

function iteri(f, l) {
  var _i = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (param) {
      Curry._2(f, i, param[0]);
      _param = param[1];
      _i = i + 1 | 0;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function of_list(xs) {
  var l = List.length(xs);
  var s = Caml_string.caml_create_string(l);
  iteri((function (i, c) {
          s[i] = c;
          return /* () */0;
        }), xs);
  return Bytes.unsafe_to_string(s);
}

function getCharCategory(ch) {
  var switcher = ch - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    var switcher$1 = switcher - 23 | 0;
    if (switcher$1 > 9 || switcher$1 < 0) {
      return /* Normal */[ch];
    } else {
      switch (switcher$1) {
        case 0 : 
            return /* Space */2;
        case 1 : 
        case 2 : 
        case 3 : 
        case 4 : 
        case 5 : 
        case 6 : 
        case 7 : 
            return /* Normal */[ch];
        case 8 : 
            return /* LeftBracket */0;
        case 9 : 
            return /* RightBracket */1;
        
      }
    }
  } else if (switcher === 3 || switcher === 2) {
    return /* Normal */[ch];
  } else {
    return /* Space */2;
  }
}

function tokenizer(input) {
  var list = to_list(input);
  var list$1 = List.map(getCharCategory, list);
  var proc = function (param) {
    if (param) {
      var match = param[0];
      if (typeof match === "number") {
        switch (match) {
          case 0 : 
              return /* :: */[
                      /* Bracket */Block.__(0, [true]),
                      proc(param[1])
                    ];
          case 1 : 
              return /* :: */[
                      /* Bracket */Block.__(0, [false]),
                      proc(param[1])
                    ];
          case 2 : 
              var eat = function (_list) {
                while(true) {
                  var list = _list;
                  if (list) {
                    var match = list[0];
                    if (typeof match === "number" && match >= 2) {
                      _list = list[1];
                      continue ;
                    } else {
                      return list;
                    }
                  } else {
                    return list;
                  }
                };
              };
              return /* :: */[
                      /* Spaces */0,
                      proc(eat(param[1]))
                    ];
          
        }
      } else {
        var feed = function (_text, _next) {
          while(true) {
            var next = _next;
            var text = _text;
            if (next) {
              var match = next[0];
              if (typeof match === "number") {
                return /* tuple */[
                        List.rev(text),
                        next
                      ];
              } else {
                _next = next[1];
                _text = /* :: */[
                  match[0],
                  text
                ];
                continue ;
              }
            } else {
              return /* tuple */[
                      List.rev(text),
                      next
                    ];
            }
          };
        };
        var match$1 = feed(/* :: */[
              match[0],
              /* [] */0
            ], param[1]);
        return /* :: */[
                /* Entity */Block.__(1, [of_list(match$1[0])]),
                proc(match$1[1])
              ];
      }
    } else {
      return /* [] */0;
    }
  };
  return proc(list$1);
}

var ParseFailed = Caml_exceptions.create("SExp-ReactTemplate.ParseFailed");

function parseList(input) {
  var proc = function (_prev, _param) {
    while(true) {
      var param = _param;
      var prev = _prev;
      if (param) {
        var match = param[0];
        if (typeof match === "number") {
          _param = param[1];
          continue ;
        } else if (match.tag) {
          _param = param[1];
          _prev = /* :: */[
            /* Atom */Block.__(0, [match[0]]),
            prev
          ];
          continue ;
        } else if (match[0]) {
          var match$1 = proc(/* [] */0, param[1]);
          _param = match$1[1];
          _prev = /* :: */[
            /* List */Block.__(1, [match$1[0]]),
            prev
          ];
          continue ;
        } else {
          return /* tuple */[
                  List.rev(prev),
                  param[1]
                ];
        }
      } else {
        throw ParseFailed;
      }
    };
  };
  return proc(/* [] */0, input);
}

function parse(input) {
  var valid = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var match = param[0];
        if (typeof match === "number") {
          _param = param[1];
          continue ;
        } else if (match.tag) {
          _param = param[1];
          continue ;
        } else if (match[0]) {
          return param[1];
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        return /* [] */0;
      }
    };
  };
  var match = parseList(valid(tokenizer($$String.trim(input))));
  return /* List */Block.__(1, [match[0]]);
}

var empty = /* List */Block.__(1, [/* [] */0]);

exports.empty = empty;
exports.toString = toString;
exports.parse = parse;
/* No side effect */
